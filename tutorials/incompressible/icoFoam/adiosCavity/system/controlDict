/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.05;

deltaT          0.005;

writeControl    timeStep;

writeInterval   5;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable false;

functions
{
    Lambda2
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Lambda2;
        
        outputControl       outputTime;
    }
    
    Q
    {
        functionObjectLibs  ( "libutilityFunctionObjects.so" );
        type                Q;
        
        outputControl       outputTime;
    }
    
    // Only available if you have swak4Foam installed
    // (uncomment if you have swak4Foam)
    /*
    vorticity
    {
        functionObjectLibs  ( "libswakFunctionObjects.so" );
        type                expressionField;
        
        outputControl       outputTime;

        fieldName           vorticity;
        expression          "curl(U)";
        autowrite           true;
    }
    */
    
    adiosData
    {
        // Write the solution (Eulerian and Lagrangian fields)
        // into an ADIOS container
        type                adiosWrite;
        
        // Where to load it from
        functionObjectLibs  ( "libIOadiosWrite.so" );
        
        // We can write mesh, fields and particles from multiple regions 
        regions 
        (
         
            // Name of primary region is 'region0'
            region0
            {
                // Volume fields to write
                objectNames         ( U p Lambda2 Q vorticity phi);
        
                // Kinematic clouds to write (leave blank to skip)
                cloudNames          (  );
        
                // Attributes to write for particles. Valid choices are:
                //  - origProc        = Original process (from where it was injected)
                //  - origId          = ID on orignal process
                //  - cell            = Current cell (on local process)
                //  - currProc        = Current process
                //  - rho             = Particle density
                //  - d               = Particle diameter
                //  - age             = Particle age
                //  - position        = Position in space
                //  - U               = Particle velocity
                //  - Us              = Slip velocity Us = U - Uc
                cloudAttribs        (  );

            }
        );

        // Output I/O method (e.g. MPI (default), POSIX, MPI_AGGREGATE)
        // run 'adios_config -m' to see available methods
        adiosMethod        MPI;

        // Parameters for the selected method, default = ""
        methodparams       "verbose=4";
        
        // Write interval (in number of iterations)
        writeInterval       5;
    }
}

// ************************************************************************* //

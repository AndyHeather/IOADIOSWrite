
functions
{
    adiosData
    {
        // Write the solution (Eulerian and Lagrangian fields)
        // into an ADIOS container
        type                adiosWrite;
        
        // Where to load it from
        functionObjectLibs  ( "libIOadiosWrite.so" );

        // We can write mesh, fields and particles from multiple regions 
        regions 
        (
         
            // Name of primary region is 'region0'
            region0
            {
                // Volume fields to write
                objectNames         ( );
        
                // Kinematic clouds to write (leave blank to skip)
                cloudNames          ( kinematicCloud );
        
                // Attributes to write for particles. Valid choices are:
                //  - origProc        = Original process (from where it was injected)
                //  - origId          = ID on orignal process
                //  - cell            = Current cell (on local process)
                //  - currProc        = Current process
                //  - rho             = Particle density
                //  - d               = Particle diameter
                //  - age             = Particle age
                //  - position        = Position in space
                //  - U               = Particle velocity
                //  - Us              = Slip velocity Us = U - Uc
                cloudAttribs        ( origProc origID cell currProc rho d position U Us age );

            }
        )

        // Output I/O method (e.g. MPI (default), POSIX, MPI_AGGREGATE)
        // run 'adios_config -m' to see available methods
        adiosMethod        MPI;

        // Parameters for the selected method, default = ""
        methodparams       "verbose=4";
        
        // Write interval (in number of iterations)
        writeInterval       5;
    }
}

// ************************************************************************* //
